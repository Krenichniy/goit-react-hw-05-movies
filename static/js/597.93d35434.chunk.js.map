{"version":3,"file":"static/js/597.93d35434.chunk.js","mappings":"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","sources":["components/Cast.jsx","components/StyledComponent.js","helpers/FetchData/FetchData.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport Loader from 'components/Loader';\nimport { fetchCast } from \"helpers/FetchData/FetchData\";\nimport { StyledCastConatiner, StyledCastItem } from './StyledComponent';\nimport noPhoto from '../defaultImage/noPhoto.jpg'\nconst API_KEY = '09630d0efe652d6d61bcfe25c1802e1f';\n const Cast = () => {\n    const { id } = useParams();\n    const [state, setSate] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n\n        useEffect(() => {\n        const getCast = async () => {\n            setIsLoading(true);\n            try {\n                const response = await fetchCast(id);\n                setSate(state => [...state, ...response.cast])\n            }\n            catch (error) {\n                Notify.failure(error);\n            }\n            finally {\n                setIsLoading(false);\n            }\n        }\n        getCast();\n\n        }, [id ]);\n    \n    const casts=state?.map(el => {\n        return <StyledCastItem key={el.id}>\n          <div>\n                {el.profile_path ?\n                    <img src={`https://image.tmdb.org/t/p/w300/${el.profile_path}?api_key=${API_KEY}`} alt={el.name} width={200} height={250} />\n                    :<img src={noPhoto} alt={el.name} width={200} height={250} />\n                }\n          </div>\n        <p>{el.name}</p>\n        <p>Character : { el.character}</p> \n      </StyledCastItem>\n})\n    return (\n        <>\n            {isLoading && <Loader />}\n            <StyledCastConatiner>{casts}</StyledCastConatiner>\n        </>\n    )\n}\n\nexport default Cast;","const { default: styled } = require('styled-components');\n\nexport const StyledContainer = styled.div`\n        width:1200px;\n        margin: 0 auto ;\n        padding: 30px 15px;\n`\nexport const StyledCastConatiner = styled.ul`\n        display:flex;\n        flex-wrap:wrap;\n        align-items:center;\n        justify-content:center;\n        margin:0;\n        padding:0;\n`\n\nexport const StyledCastItem = styled.li`\n        display:flex;\n        flex-direction:column;\n        align-items:flex-start;\n        justify-content:center;\n        width:200px;\n        padding:5px;\n        border-radius: 10px;\n        margin-bottom:30px;\n        transform:scale(1);\n        transition: transform 500ms linear;\n        &:hover, &:focus{\n                box-shadow: 0 8px 20px rgba(0,128,128,0.5), 0 20px 25px rgba(0,128,128,0.5);\n                transform:scale(1.1);\n        }\n`","import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst API_KEY = '09630d0efe652d6d61bcfe25c1802e1f';\nconst URL = `https://api.themoviedb.org/3`;\nexport  const FetchMovieFromApi = async ( value) => {\n   \n    try {\n        const response = await fetch(`${URL}/movie/${value}?api_key=${API_KEY}&language=en-US`);\n        if (!response.ok) throw new Error(response.status);\n        const result = await response.json();\n        return result;\n    }\n    catch (error){\n        Notify.failure(error);\n    }\n}\n\nexport const fetchCast = async (value) => {\n    try {\n        const response = await fetch(`${URL}/movie/${value}/credits?api_key=${API_KEY}&language=en-US`);\n        const result = await response.json();\n        return result;\n    }\n    catch(error) {\n        Notify.failure(error);\n    }\n}\n\nexport const fetchReview = async (value) => {\n    try {\n        const response = await fetch(`${URL}/movie/${value}/reviews?api_key=${API_KEY}&language=en-US`);\n        const result = await response.json();\n        return result;\n    }\n    catch(error) {\n        Notify.failure(error);\n    }\n}\nexport const fetchAllVideoLibrary = async () => {\n    try {\n        const response = await fetch(`${URL}/trending/movie/week?api_key=${API_KEY}`);\n        if (!response.ok) throw new Error(response.status);\n        const result = await response.json();\n        return result;\n    }\n    catch(error) {\n        Notify.failure(error);\n    }\n}\n\nexport const fetchByQuery = async (query) => {\n    try {\n        const response = await fetch(`${URL}/search/movie?api_key=${API_KEY}&query=${query}&language=en-USpage=1&include_adult=false`);\n         if (!response.ok) throw new Error(response.status);\n        const result = await response.json();\n        return result;\n    }\n    catch(error) {\n        Notify.failure(error);\n    }\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["id","useParams","useState","state","setSate","isLoading","setIsLoading","useEffect","getCast","fetchCast","response","cast","Notify","casts","map","el","profile_path","src","alt","name","width","height","noPhoto","character","styled","require","default","StyledContainer","div","StyledCastConatiner","ul","StyledCastItem","li","API_KEY","URL","FetchMovieFromApi","value","fetch","ok","Error","status","json","result","fetchReview","fetchAllVideoLibrary","fetchByQuery","query","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}